<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Scripts - Tag - The Reverser&#39;s Draft</title>
        <link>https://moval0x1.github.io/tags/scripts/</link>
        <description>Scripts - Tag - The Reverser&#39;s Draft</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Aug 2024 19:22:53 -0300</lastBuildDate><atom:link href="https://moval0x1.github.io/tags/scripts/" rel="self" type="application/rss+xml" /><item>
    <title>Automating Tasks With x64dbg Scripts</title>
    <link>https://moval0x1.github.io/posts/automating-tasks-with-x64dbg-scripts/</link>
    <pubDate>Wed, 28 Aug 2024 19:22:53 -0300</pubDate>
    <author>moval0x1</author>
    <guid>https://moval0x1.github.io/posts/automating-tasks-with-x64dbg-scripts/</guid>
    <description><![CDATA[<h2 id="a-short-overview-of-x64dbg">A short overview of x64dbg</h2>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-logo.png" title="x64dbg logo" data-thumbnail="/images/x64dbgScripts/x64dbg-logo.png" data-sub-html="<h2>x64dbg logo</h2><p>x64dbg logo</p>">
        
    </a><figcaption class="image-caption">x64dbg logo</figcaption>
    </figure></p>
<p>According to <a href="https://x64dbg.com/#" target="_blank" rel="noopener noreffer "><strong>x64bg</strong></a> website, it is <em>an open-source x64/x32 debugger for windows</em>. You can find an extensible list of features there.</p>
<p>If you are generally interested in reverse engineering, you&rsquo;ll undoubtedly use x64dbg and I&rsquo;m sure you&rsquo;ll love it. Thanks for the fantastic tool <a href="https://github.com/mrexodia" target="_blank" rel="noopener noreffer "><strong>mrexodia</strong></a>.</p>
<h2 id="what-are-x64dbg-scripts">What are x64dbg scripts?</h2>
<p>x64dbg scripts are small chunks of instructions that are executed step by step. All the script commands are described <a href="https://help.x64dbg.com/en/latest/commands/index.html" target="_blank" rel="noopener noreffer "><strong>here</strong></a>. Let&rsquo;s start with a <em>&ldquo;Hello World!&rdquo;</em> as usual.</p>
<p>We can do it in two different ways: <a href="https://help.x64dbg.com/en/latest/commands/script/log.html" target="_blank" rel="noopener noreffer "><strong>log</strong></a> command or <a href="https://help.x64dbg.com/en/latest/commands/script/msg.html" target="_blank" rel="noopener noreffer "><strong>msg</strong></a> command. Both of them are super easy to work with!</p>
<h3 id="how-can-we-use-it">How can we use it?</h3>
<p>It is possible to execute these commands directly on the script tab, save a file, and load it on the script part, or type both in the <strong>command bar</strong>. In the first example, I used the <strong>command bar</strong> to execute the script.</p>
<h4 id="some-simple-examples">Some simple examples</h4>
<h5 id="log-command">Log command</h5>
<pre tabindex="0"><code>log &#34;Hello World!&#34;
</code></pre><p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-log-helloworld.png" title="x64dbg log Hello World" data-thumbnail="/images/x64dbgScripts/x64dbg-log-helloworld.png" data-sub-html="<h2>Example of log tab after run the above command</h2><p>x64dbg log Hello World</p>">
        
    </a><figcaption class="image-caption">Example of log tab after run the above command</figcaption>
    </figure></p>
<h5 id="msg-command">Msg command</h5>
<pre tabindex="0"><code>msg &#34;Hello World!&#34;
</code></pre><p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-msg-helloworld.png" title="x64dbg msg Hello World" data-thumbnail="/images/x64dbgScripts/x64dbg-msg-helloworld.png" data-sub-html="<h2>Example of the msg command ran above&#39;</h2><p>x64dbg msg Hello World</p>">
        
    </a><figcaption class="image-caption">Example of the msg command ran above'</figcaption>
    </figure></p>
<h2 id="using-it-in-real-life">Using it in real life</h2>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/dwight-lets-do-this.gif" title="Lets do this!" data-thumbnail="/images/x64dbgScripts/dwight-lets-do-this.gif" data-sub-html="<h2>Let&#39;s do this!</h2><p>Lets do this!</p>">
        
    </a><figcaption class="image-caption">Let's do this!</figcaption>
    </figure></p>
<h3 id="getting-the-first-malware-sample">Getting the first malware sample</h3>
<p>On <a href="https://bazaar.abuse.ch/sample/7e18e5fe9e980c48ad67cc2ce7423e818e15c1256e2ffe4ce85c5cfbd5b30877/" target="_blank" rel="noopener noreffer "><strong>MalwareBazaar</strong></a> I&rsquo;ve collect a <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.darkgate" target="_blank" rel="noopener noreffer "><strong>DarkGate</strong></a> sample to start our analyzis.</p>
<blockquote>
<p>First documented in 2018, DarkGate is a commodity loader with features that include the ability to download and execute files to memory, a Hidden Virtual Network Computing (HVNC) module, keylogging, information-stealing capabilities, and privilege escalation. DarkGate makes use of legitimate AutoIt files and typically runs multiple AutoIt scripts. New versions of DarkGate have been advertised on a Russian language eCrime forum since May 2023.</p>
</blockquote>
<h3 id="understand-it-first-part">Understand it, first part</h3>
<p>This sample dropped an <strong>AutoIt</strong> and started it, so it was not a good choice in this example of x64dbg scripts. At that time, I had just opened the MalwareBazaar website and collected the first sample. So, I&rsquo;ve decided to keep it to show another option (a quite simple one).</p>
<p>When I opened the debugger, I focused on creating the process. My thoughts were to use <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" target="_blank" rel="noopener noreffer "><strong>CreateProcessA</strong></a> to collect the second parameter, which is the command line, and log it.</p>
<h3 id="crafting-the-easiest-script-in-the-world">Crafting the easiest script in the world</h3>
<pre tabindex="0"><code>// Go to entrypoint
run

// Clear all breakpoints
bpc
bphc
bpmc

// Set the breakpoint
bp CreateProcessA
run

// Log the commandLine argument
log &#34;[+] {s:esp+8}&#34;

msg &#34;Now, take a look on the LOG tab!&#34;
ret
</code></pre><p>To load it on the x64dbg, we can find a tab called &ldquo;Script&rdquo;.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-script-tab.png" title="x64dbg script tab" data-thumbnail="/images/x64dbgScripts/x64dbg-script-tab.png" data-sub-html="<h2>x64dbg script tab</h2><p>x64dbg script tab</p>">
        
    </a><figcaption class="image-caption">x64dbg script tab</figcaption>
    </figure></p>
<p><strong>Right click &gt; Load Script</strong> and then load from a file or paste it directly.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-load-script-options.png" title="x64dbg load script" data-thumbnail="/images/x64dbgScripts/x64dbg-load-script-options.png" data-sub-html="<h2>x64dbg load script options</h2><p>x64dbg load script</p>">
        
    </a><figcaption class="image-caption">x64dbg load script options</figcaption>
    </figure></p>
<p>And that is the result of running this script.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-log-darkgate.png" title="x64dbg log script execution" data-thumbnail="/images/x64dbgScripts/x64dbg-log-darkgate.png" data-sub-html="<h2>x64dbg log tab after script execution</h2><p>x64dbg log script execution</p>">
        
    </a><figcaption class="image-caption">x64dbg log tab after script execution</figcaption>
    </figure></p>
<p>Really easy, isn&rsquo;t it? Let&rsquo;s try another one with more challenges to solve.</p>
<h3 id="getting-the-second-malware-sample">Getting the second malware sample</h3>
<p>Here I collect a really good example to this post, a <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.mars_stealer" target="_blank" rel="noopener noreffer "><strong>MarsStealer</strong></a> sample from <a href="https://bazaar.abuse.ch/sample/6509ea13b16d01894b8c084fc4fd292651d1ae88a59dfc63d2f87d8dbbcc6f03/" target="_blank" rel="noopener noreffer "><strong>MalwareBazaar</strong></a>.</p>
<blockquote>
<p>3xp0rt describes Mars Stealer as an improved successor of Oski Stealer, supporting stealing from current browsers and targeting crypto currencies and 2FA plugins.</p>
</blockquote>
<h3 id="understand-it-second-part">Understand it, second part</h3>
<h4 id="triage">Triage</h4>
<p>On <a href="https://github.com/horsicq/Detect-It-Easy" target="_blank" rel="noopener noreffer "><strong>DiE</strong></a> it does not tell us much about the file, looks like a <em>normal</em> file, right?</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/die-marsstealer.png" title="DiE marsStealer scan" data-thumbnail="/images/x64dbgScripts/die-marsstealer.png" data-sub-html="<h2>DiE MarsStealer scan</h2><p>DiE marsStealer scan</p>">
        
    </a><figcaption class="image-caption">DiE MarsStealer scan</figcaption>
    </figure></p>
<p>Using a second <a href="https://github.com/4n0nym0us/4n4lDetector" target="_blank" rel="noopener noreffer "><strong>option</strong></a> to scan, we find out that we are dealing with a version of <a href="https://www.oreans.com/Themida.php" target="_blank" rel="noopener noreffer "><strong>Themida</strong></a>.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/4detector-themida.png" title="4detector themida" data-thumbnail="/images/x64dbgScripts/4detector-themida.png" data-sub-html="<h2>Themida 2.x is identified</h2><p>4detector themida</p>">
        
    </a><figcaption class="image-caption">Themida 2.x is identified</figcaption>
    </figure></p>
<h4 id="the-themida-script">The Themida Script</h4>
<p>So, this time, I was really lucky! Now, I have a perfect example of how scripts can be helpful in our daily jobs.
On the x64dbg Github we found some excellent scripts and fortunately, one of them is a <a href="https://github.com/x64dbg/Scripts/blob/9decfb862e11052b53d045a63e7fcd927fe8027f/Themida%20v2.x.x.x%20OEP%20Finder.txt" target="_blank" rel="noopener noreffer "><strong>Themida v2.x.x.x OEP Finder by Yildo &amp; Mobile46</strong></a></p>
<p>One of the first comments there, tell us:</p>
<blockquote>
<p>Always use an anti-anti-debug plugin (SharpOD, ScyllaHide, etc.)</p>
</blockquote>
<p>Ok! I&rsquo;ve setting up my debugger with the Themida profile offered by <a href="https://github.com/x64dbg/ScyllaHide" target="_blank" rel="noopener noreffer "><strong>ScyllaHide</strong></a>.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-scyllahide-themida-profile.png" title="ScyllaHide Themida profile" data-thumbnail="/images/x64dbgScripts/x64dbg-scyllahide-themida-profile.png" data-sub-html="<h2>ScyllaHide Themida profile</h2><p>ScyllaHide Themida profile</p>">
        
    </a><figcaption class="image-caption">ScyllaHide Themida profile</figcaption>
    </figure></p>
<p>To run the script, we can press the space bar and wait for the OEP (Original EntryPoint).</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-script-loaded.png" title="x64dbg script loaded" data-thumbnail="/images/x64dbgScripts/x64dbg-script-loaded.png" data-sub-html="<h2>x64dbg Script Loaded</h2><p>x64dbg script loaded</p>">
        
    </a><figcaption class="image-caption">x64dbg Script Loaded</figcaption>
    </figure></p>
<p>After all the steps to execute, we got the OEP.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-themida-script-finished.png" title="x64dbg OEP" data-thumbnail="/images/x64dbgScripts/x64dbg-themida-script-finished.png" data-sub-html="<h2>OEP found by the themida script</h2><p>x64dbg OEP</p>">
        
    </a><figcaption class="image-caption">OEP found by the themida script</figcaption>
    </figure></p>
<p>To dump it you can easily use the Scylla with:
<strong>IAT Autosearch &gt; Get Imports &gt; Dump &gt; Fix Dump</strong>.</p>
<p>And then&hellip; you can analyze the malware without any problem :)</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-themida-unpacked.png" title="x64dbg themida unpacked" data-thumbnail="/images/x64dbgScripts/x64dbg-themida-unpacked.png" data-sub-html="<h2>Themida unpacked using OEP Finder by Yildo &amp; Mobile46</h2><p>x64dbg themida unpacked</p>">
        
    </a><figcaption class="image-caption">Themida unpacked using OEP Finder by Yildo & Mobile46</figcaption>
    </figure></p>
<h3 id="breaking-down-the-script">Breaking Down the Script</h3>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">bpd
bphd
bpmd
</code></pre><p>These commands are used to clear or disable any existing breakpoints to ensure they do not interfere with the script’s execution:</p>
<ul>
<li><code>bpd</code>: Clear all data breakpoints.</li>
<li><code>bphd</code>: Clear all hardware breakpoints.</li>
<li><code>bpmd</code>: Clear all memory breakpoints.</li>
</ul>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">mov $sectionAddress, mod.main() + mem.size(mod.main())
</code></pre><p>It calculates the address where the section starts by adding the size of the main module to the base address of the module.</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">cmp mem.isvalid($sectionAddress), 0
je error

cmp mem.iscode($sectionAddress), 0
je error
</code></pre><ul>
<li><code>mem.isvalid($sectionAddress)</code>: Checks if the memory at <code>$sectionAddress</code> is valid.</li>
<li><code>mem.iscode($sectionAddress)</code>: Checks if the memory at <code>$sectionAddress</code> contains executable code.</li>
</ul>
<p>If either check fails, it jumps to the error label, which outputs an error message.</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">mov $backup, [$sectionAddress]
bph VirtualProtect
</code></pre><ul>
<li><code>mov $backup, [$sectionAddress]</code>: Saves the current value at <code>$sectionAddress</code> to <code>$backup</code>.</li>
<li><code>bph VirtualProtect</code>: Sets a hardware breakpoint on <strong>VirtualProtect</strong>, a function used to change memory protection, to monitor modifications.</li>
</ul>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">loop:
erun
cmp [$sectionAddress], $backup
jne continue

jmp loop
</code></pre><ul>
<li><code>erun</code>: Executes the code until a breakpoint is hit or the process continues.</li>
<li><code>cmp [$sectionAddress], $backup</code>: Compares the current value at <code>$sectionAddress</code> with the <code>$backup</code> value.</li>
</ul>
<p>If the values are not equal <strong>(jne)</strong>, it jumps to the continue label. Otherwise, it loops, repeatedly checking if the value has changed.</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">continue:
erun
erun

bphc VirtualProtect
bpm $sectionAddress, x

erun
d
cmt cip, &#34;OEP&#34;
ret
</code></pre><ul>
<li><code>erun (executed twice)</code>: Continues the execution until it hits another breakpoint.</li>
<li><code>bphc VirtualProtect</code>: Clears the hardware breakpoint on VirtualProtect.</li>
<li><code>bpm $sectionAddress, x</code>: Sets a memory breakpoint (on execute) at <code>$sectionAddress</code>.</li>
<li><code>erun</code>: Continues execution until the memory breakpoint is hit.</li>
<li><code>d</code>: Disassembles the current address.</li>
<li><code>cmt cip, &quot;OEP&quot;</code>: Comments the current instruction pointer <strong>(IP)</strong> with <em>&ldquo;OEP&rdquo;</em>, marking the found Original Entry Point.</li>
</ul>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">error:
msg &#34;This PE file is not supported!&#34;
ret
</code></pre><p>If the script encounters an unsupported <strong>PE</strong> file, it outputs an error message and terminates.</p>
<h2 id="conclusion">Conclusion</h2>
<p>You can create scripts to automate most of the repetitive tasks or make them help, such as, in this case, unpacking a specific packer such as Themida.</p>
]]></description>
</item>
</channel>
</rss>
